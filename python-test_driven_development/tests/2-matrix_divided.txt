#testing matrix_divided from 2-matrix_divided module
____________________________________________________
first import matrix_divided from module
>>> matrix_divided =__import__('2-matrix_divided').matrix_divided

SUCCES CASES:
all elements are int or float:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

float numbers:
    >>> matrix = [[1.5, 2.33, 3.44], [4.32, 5.333, 6.2222]]
    >>> matrix_divided(matrix, 3)
    [[0.5, 0.78, 1.15], [1.44, 1.78, 2.07]]

negative elements:
    >>> matrix = [[-1.5, 2.33, -3.44], [4.32, -5.333, 6.2222]]
    >>> matrix_divided(matrix, 3)
    [[-0.5, 0.78, -1.15], [1.44, -1.78, 2.07]]

divide by inf:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

FAIL CASES:
div equal to zero:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

different type of elements:
    >>> matrix = [[1, 2, 3], [4, 5, 'rr']]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

div different type:
    >>> matrix = [[1, 2, 3], [4, 5, 3]]
    >>> matrix_divided(matrix, 'rr')
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

different length in matrix rows:
    >>> matrix = [[1, 2, 3], [4, 5]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

missing one argument:
    >>> matrix_divided(matrix)
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

missing two arguments:
    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
